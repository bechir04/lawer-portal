generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  lawyerProfile LawyerProfile?
  clientProfile ClientProfile?

  lawyerCases   Case[] @relation("LawyerCases")
  clientCases   Case[] @relation("ClientCases")

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  conversations1 Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")

  hostedCalls  VideoCall[] @relation("HostedCalls")
  joinedCalls  VideoCall[] @relation("JoinedCalls")

  uploadedDocuments Document[]

  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LawyerProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  barNumber      String   @unique
  specialization String[]
  experience     Int
  hourlyRate     Float?
  bio            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientProfile {
  id      String @id @default(cuid())
  userId  String @unique
  phone   String?
  address String?
  company String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Case {
  id          String     @id @default(cuid())
  title       String
  description String
  status      CaseStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  lawyerId    String
  clientId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  dueDate     DateTime?

  lawyer     User        @relation("LawyerCases", fields: [lawyerId], references: [id])
  client     User        @relation("ClientCases", fields: [clientId], references: [id])
  messages   Message[]
  documents  Document[]
  videoCalls VideoCall[]

  @@index([lawyerId])
  @@index([clientId])
  @@index([status])
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  user1Id   String
  user2Id   String
  createdAt DateTime  @default(now())

  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]

  @@index([user1Id])
  @@index([user2Id])
}

model Message {
  id             String      @id @default(cuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  caseId         String?
  type           MessageType @default(TEXT)
  createdAt      DateTime    @default(now())
  readAt         DateTime?
  seen           Boolean  @default(false)


  sender       User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  case         Case?       @relation(fields: [caseId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([caseId])
  @@index([conversationId])
  @@index([createdAt])
}

model VideoCall {
  id              String          @id @default(cuid())
  title           String
  description     String?
  hostId          String
  participantId   String
  caseId          String?
  status          VideoCallStatus @default(SCHEDULED)
  scheduledAt     DateTime
  startedAt       DateTime?
  endedAt         DateTime?
  duration        Int?
  recordingUrl    String?
  agoraChannelName String @unique
  createdAt       DateTime        @default(now())

  host        User  @relation("HostedCalls", fields: [hostId], references: [id])
  participant User  @relation("JoinedCalls", fields: [participantId], references: [id])
  case        Case? @relation(fields: [caseId], references: [id])

  @@index([hostId])
  @@index([participantId])
  @@index([caseId])
  @@index([scheduledAt])
}

model Document {
  id            String       @id @default(cuid())
  filename      String
  originalName  String
  fileSize      Int
  mimeType      String
  url           String
  uploaderId    String
  caseId        String?
  type          DocumentType @default(OTHER)
  createdAt     DateTime     @default(now())

  uploader User  @relation(fields: [uploaderId], references: [id])
  case     Case? @relation(fields: [caseId], references: [id])

  @@index([uploaderId])
  @@index([caseId])
  @@index([type])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum UserRole {
  LAWYER
  CLIENT
  ADMIN
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum VideoCallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  CONTRACT
  EVIDENCE
  CORRESPONDENCE
  COURT_FILING
  OTHER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  MESSAGE
  VIDEO_CALL
  DOCUMENT
}
